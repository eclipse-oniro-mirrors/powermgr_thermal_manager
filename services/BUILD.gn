# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/powermgr/display_manager/displaymgr.gni")
import("//base/powermgr/thermal_manager/thermalmgr.gni")
import("//build/ohos.gni")

config("thermalsrv_private_config") {
  include_dirs = [
    "//third_party/libxml2/include",
    "//base/startup/appspawn/include/",
    "${ability_runtime_services_path}/abilitymgr/include/",
    "${ability_runtime_services_path}/appmgr/include",
    "${ability_runtime_inner_api_path}/app_manager/include/appmgr",
    "//base/powermgr/power_manager/services/native/include",
    "//base/powermgr/power_manager/interfaces/innerkits/native/include",
    "//base/powermgr/power_manager/utils/native/include",
    "//base/powermgr/power_manager/services/native/src/actions/default",
    "${displaymgr_native_innerkits_path}/native/src",
    "//base/powermgr/battery_manager/interfaces/innerkits/native/include/",
    "//base/miscservices/time/interfaces/innerkits/include",
    "//foundation/windowmanager/interfaces/innerkits/wm/",
    "//third_party/flutter/skia/",
    "//foundation/windowmanager/utils/include",
    "//foundation/windowmanager/interfaces/innerkits/dm",
  ]
}

config("thermalsrv_public_config") {
  include_dirs = [
    "native/include/",
    "native/include/thermal_action",
    "native/include/thermal_observer",
    "native/include/thermal_policy",
    "native/include/thermal_observer/state_machine",
    "native/include/thermal_action/action",
    "native/include/thermal_action/action/action_soc",
    "//base/powermgr/thermal_manager/services/zidl/include",
    "//base/powermgr/thermal_manager/interfaces/innerkits/native/include",
  ]
}

ohos_shared_library("thermalservice") {
  sources = [
    "native/src/thermal_action/action/action_application_process.cpp",
    "native/src/thermal_action/action/action_charger.cpp",
    "native/src/thermal_action/action/action_display.cpp",
    "native/src/thermal_action/action/action_popup.cpp",
    "native/src/thermal_action/action/action_shutdown.cpp",
    "native/src/thermal_action/action/action_soc/action_cpu_big.cpp",
    "native/src/thermal_action/action/action_soc/action_cpu_lit.cpp",
    "native/src/thermal_action/action/action_soc/action_cpu_med.cpp",
    "native/src/thermal_action/action/action_soc/action_gpu.cpp",
    "native/src/thermal_action/action/action_thermal_level.cpp",
    "native/src/thermal_action/thermal_action_factory.cpp",
    "native/src/thermal_action/thermal_action_manager.cpp",
    "native/src/thermal_action/thermal_timer.cpp",
    "native/src/thermal_callback.cpp",
    "native/src/thermal_mgr_dumper.cpp",
    "native/src/thermal_observer/state_machine/charger_state_collection.cpp",
    "native/src/thermal_observer/state_machine/scene_state_collection.cpp",
    "native/src/thermal_observer/state_machine/screen_state_collection.cpp",
    "native/src/thermal_observer/state_machine/state_collection_factory.cpp",
    "native/src/thermal_observer/state_machine/state_machine.cpp",
    "native/src/thermal_observer/thermal_common_event_receiver.cpp",
    "native/src/thermal_observer/thermal_observer.cpp",
    "native/src/thermal_observer/thermal_sensor_info.cpp",
    "native/src/thermal_observer/thermal_service_subscriber.cpp",
    "native/src/thermal_policy/thermal_config_base_info.cpp",
    "native/src/thermal_policy/thermal_config_sensor_cluster.cpp",
    "native/src/thermal_policy/thermal_policy.cpp",
    "native/src/thermal_policy/thermal_srv_config_parser.cpp",
    "native/src/thermal_service.cpp",
    "native/src/thermalsrv_event_handler.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":thermalsrv_private_config",
  ]

  public_configs = [ ":thermalsrv_public_config" ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${displaymgr_native_innerkits_path}:displaymgr",
    "${utils_path}:thermal_utils",
    "//base/miscservices/time/services:time_service",
    "//base/powermgr/battery_manager/interfaces/innerkits:batterysrv_client",
    "//base/powermgr/power_manager/interfaces/innerkits:powermgr_client",
    "//base/powermgr/power_manager/services:powermgrservice",
    "//base/powermgr/thermal_manager/frameworks/dialog/dialog_ui/js:dialog_js_files_etc",
    "//base/powermgr/thermal_manager/services/zidl:thermalmgr_proxy",
    "//base/powermgr/thermal_manager/services/zidl:thermalmgr_stub",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//foundation/multimodalinput/input/frameworks/proxy:libmmi-client",
    "//foundation/resourceschedule/resource_schedule_service/soc_perf:socperf_client",
    "//foundation/windowmanager/utils:libwmutil",
    "//third_party/libxml2:xml2",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:app_manager",
    "ability_runtime:wantagent_innerkits",
    "appspawn:appspawn_socket_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "drivers_interface_thermal:libthermal_proxy_1.0",
    "eventhandler:libeventhandler",
    "hdf_core:libhdf_utils",
    "hdf_core:libhdi",
    "hisysevent_native:libhisysevent",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "multimedia_image_standard:image_native",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
    "window_manager:libdm",
  ]

  subsystem_name = "powermgr"
  part_name = "thermal_manager"
}

group("thermalmgr_service") {
  deps = [
    ":thermalservice",
    "native/profile:thermal_service_config",
  ]
}
