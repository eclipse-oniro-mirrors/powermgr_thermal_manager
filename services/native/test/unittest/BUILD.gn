# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/powermgr/thermal_manager/thermalmgr.gni")
import("//base/startup/appspawn/appspawn.gni")
import("//build/test.gni")

module_output_path = "thermal_manager/thermal_native"

###############################################################################
config("module_private_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "include",
    "mock",
    "//foundation/graphic/graphic_2d/utils/include/",
    "${thermal_manager_path}/services/zidl/include",
    "//base/powermgr/display_manager/interfaces/innerkits/native/include/",
    "//base/powermgr/display_manager/service/native/include/",
    "//base/powermgr/display_manager/service/zidl/include/",
    "//drivers/peripheral/display/interfaces/include/",
    "//base/powermgr/battery_manager/interfaces/innerkits/native/include/",
    "//base/powermgr/power_manager/interfaces/innerkits/native/include",
    "${aafwk_services_path}/appmgr/include",
    "${aafwk_inner_api_path}/app_manager/include/appmgr",
    "//base/startup/appspawn/include/",
    "//foundation/graphic/ui/interfaces/kits",
    "//foundation/arkui/ace_engine/adapter/ohos/entrance",
    "//foundation/graphic/graphic_2d/interfaces/innerkits/wmclient/",
    "//foundation/windowmanager/interfaces/innerkits/wm/",
    "//third_party/flutter/skia/",
    "//foundation/windowmanager/utils/include",
  ]
}

deps_ex = [
  "ability_base:base",
  "ability_base:want",
  "bundle_framework:appexecfwk_base",
  "eventhandler:libeventhandler",
  "ipc:ipc_core",
  "hiviewdfx_hilog_native:libhilog",
  "safwk:system_ability_fwk",
  "samgr_standard:samgr_proxy",
  "common_event_service:cesfwk_innerkits",
  "appspawn:appspawn_socket_client",
  "drivers_interface_thermal:libthermal_proxy_1.0",
  "hdf_core:libhdi",
  "hdf_core:libhdf_utils",
]

# thermal service test
ohos_unittest("ThermalPolicyTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_mgr_policy_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  include_dirs = [
    "//third_party/libxml2/include",
    "${appspawn_path}/include",
    "//base/powermgr/power_manager/services/native/include",
    "//base/powermgr/power_manager/interfaces/innerkits/native/include",
    "//base/powermgr/power_manager/utils/native/include",
    "//base/powermgr/power_manager/services/native/src/actions/default",
    "${aafwk_services_path}/appmgr/include",
    "${aafwk_inner_api_path}/app_manager/include/appmgr",
  ]

  deps = [
    "${aafwk_services_path}/appmgr:libappms",
    "${thermal_manager_path}/interfaces/innerkits:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "//base/powermgr/power_manager/interfaces/innerkits:powermgr_client",
    "//base/powermgr/power_manager/services:powermgrservice",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//foundation/graphic/graphic_2d:libwmclient",
    "//foundation/multimodalinput/input/frameworks/proxy:libmmi-client",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
  ]

  external_deps = deps_ex
}

# thermal level event test
ohos_unittest("ThermalLevelEventTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_level_event_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  include_dirs = [
    "//third_party/libxml2/include",
    "${appspawn_path}/include",
    "//base/powermgr/power_manager/services/native/include",
    "//base/powermgr/power_manager/interfaces/innerkits/native/include",
    "//base/powermgr/power_manager/utils/native/include",
    "//base/powermgr/power_manager/services/native/src/actions/default",
    "${aafwk_services_path}/appmgr/include",
    "${aafwk_inner_api_path}/app_manager/include/appmgr",
  ]

  deps = [
    "${aafwk_services_path}/appmgr:libappms",
    "${thermal_manager_path}/interfaces/innerkits:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "//base/powermgr/power_manager/interfaces/innerkits:powermgr_client",
    "//base/powermgr/power_manager/services:powermgrservice",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//foundation/graphic/graphic_2d:libwmclient",
    "//foundation/multimodalinput/input/frameworks/proxy:libmmi-client",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
  ]

  external_deps = deps_ex
}

# thermal client api test
ohos_unittest("ThermalClientApiTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_client_api_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  include_dirs = [
    "//third_party/libxml2/include",
    "${appspawn_path}/include",
    "//base/powermgr/power_manager/services/native/include",
    "//base/powermgr/power_manager/interfaces/innerkits/native/include",
    "//base/powermgr/power_manager/utils/native/include",
    "//base/powermgr/power_manager/services/native/src/actions/default",
    "${aafwk_services_path}/appmgr/include",
    "${aafwk_inner_api_path}/app_manager/include/appmgr",
  ]

  deps = [
    "${aafwk_services_path}/appmgr:libappms",
    "${thermal_manager_path}/interfaces/innerkits:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "//base/powermgr/power_manager/interfaces/innerkits:powermgr_client",
    "//base/powermgr/power_manager/services:powermgrservice",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//foundation/graphic/graphic_2d:libwmclient",
    "//foundation/multimodalinput/input/frameworks/proxy:libmmi-client",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
  ]

  external_deps = deps_ex
}

# thermal action hub test
ohos_unittest("ThermalActionHubTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_action_hub_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  include_dirs = [
    "//third_party/libxml2/include",
    "${appspawn_path}/include",
    "//base/powermgr/power_manager/services/native/include",
    "//base/powermgr/power_manager/interfaces/innerkits/native/include",
    "//base/powermgr/power_manager/utils/native/include",
    "//base/powermgr/power_manager/services/native/src/actions/default",
    "${aafwk_services_path}/appmgr/include",
    "${aafwk_inner_api_path}/app_manager/include/appmgr",
  ]

  deps = [
    "${aafwk_services_path}/appmgr:libappms",
    "${thermal_manager_path}/interfaces/innerkits:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "//base/powermgr/power_manager/interfaces/innerkits:powermgr_client",
    "//base/powermgr/power_manager/services:powermgrservice",
    "//base/powermgr/thermal_manager/services/zidl:thermalmgr_proxy",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//foundation/graphic/graphic_2d:libwmclient",
    "//foundation/multimodalinput/input/frameworks/proxy:libmmi-client",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
  ]

  external_deps = deps_ex
}
group("unittest") {
  testonly = true
  deps = [
    ":ThermalActionHubTest",
    ":ThermalClientApiTest",
    ":ThermalLevelEventTest",
    ":ThermalPolicyTest",
  ]
}
