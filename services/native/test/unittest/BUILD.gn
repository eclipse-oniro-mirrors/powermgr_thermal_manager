# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/powermgr/thermal_manager/thermalmgr.gni")
import("//build/test.gni")

module_output_path = "thermal_manager/thermal_native"

###############################################################################
config("module_private_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "include",
    "mock",
    "${thermal_service_zidl}/include",
    "${ability_runtime_services_path}/appmgr/include",
  ]
}

deps_ex = [
  "ability_base:base",
  "ability_base:want",
  "battery_manager:batterysrv_client",
  "bundle_framework:appexecfwk_base",
  "eventhandler:libeventhandler",
  "ipc:ipc_core",
  "hiviewdfx_hilog_native:libhilog",
  "power_manager:powermgr_client",
  "safwk:system_ability_fwk",
  "samgr:samgr_proxy",
  "common_event_service:cesfwk_innerkits",
  "appspawn:appspawn_socket_client",
  "window_manager:libwm",
  "drivers_interface_thermal:libthermal_proxy_1.0",
]

# thermal service test
ohos_unittest("ThermalPolicyTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_mgr_policy_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal level event test
ohos_unittest("ThermalLevelEventTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_level_event_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal client api test
ohos_unittest("ThermalClientApiTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_client_api_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal action hub test
ohos_unittest("ThermalActionHubTest") {
  module_out_path = module_output_path

  sources = [ "src/thermal_action_hub_test.cpp" ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "${thermal_service_zidl}:thermalmgr_proxy",
    "${thermal_service_zidl}:thermalmgr_stub",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

# thermal action report test
ohos_unittest("ThermalActionReportTest") {
  module_out_path = module_output_path

  sources = [
    "src/thermal_action_report_test.cpp",
    "src/thermal_config_file_parser.cpp",
  ]

  configs = [
    "${utils_path}:utils_config",
    ":module_private_config",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_innerkits}:thermalsrv_client",
    "${thermal_manager_path}/services:thermalservice",
    "//base/powermgr/battery_statistics/interfaces/innerkits:batterystats_client",
    "//base/powermgr/battery_statistics/utils:batterystats_utils",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = deps_ex
}

group("unittest") {
  testonly = true
  deps = [
    ":ThermalActionHubTest",
    ":ThermalActionReportTest",
    ":ThermalClientApiTest",
    ":ThermalLevelEventTest",
    ":ThermalPolicyTest",
  ]
}
