# Copyright (C) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/powermgr/thermal_manager/thermalmgr.gni")
import("//base/startup/appspawn/appspawn.gni")
import("//build/test.gni")

module_output_path = "thermal_manager/thermal_native"

deps_ex = [
  "ability_base:base",
  "ability_base:want",
  "eventhandler:libeventhandler",
  "ipc:ipc_core",
  "hiviewdfx_hilog_native:libhilog",
  "safwk:system_ability_fwk",
  "samgr:samgr_proxy",
  "appspawn:appspawn_socket_client",
  "drivers_interface_thermal:libthermal_proxy_1.0",
  "c_utils:utils",
]

ohos_systemtest("ThermalMgrInterfaceTest") {
  module_out_path = "${module_output_path}"

  sources = [ "src/thermal_mgr_interface_test.cpp" ]

  configs = [ "${utils_path}:utils_config" ]

  include_dirs = [
    "include",
    "//foundation/graphic/graphic_2d/utils/include/",
    "${thermal_manager_path}/services/native/include",
    "${thermal_manager_path}/services/native/include/thermal_action",
    "${thermal_manager_path}/services/native/include/thermal_observer",
    "${thermal_manager_path}/services/native/include/thermal_policy",
    "${thermal_manager_path}/services/native/include/thermal_observer/state_machine",
    "${thermal_manager_path}/services/native/include/thermal_action/action",
    "${thermal_manager_path}/services/zidl/include",
    "//base/powermgr/display_manager/interfaces/innerkits/native/include/",
    "//base/powermgr/display_manager/service/native/include/",
    "//base/powermgr/display_manager/service/zidl/include/",
    "//drivers/peripheral/display/interfaces/include/",
    "//base/powermgr/battery_manager/interfaces/innerkits/native/include/",
    "//base/powermgr/power_manager/interfaces/innerkits/native/include",
    "${ability_runtime_services_path}/appmgr/include",
    "${ability_runtime_inner_api_path}/app_manager/include/appmgr",
    "//base/startup/appspawn/include/",
    "//foundation/window/window_manager/interfaces/innerkits/wm/",
    "//third_party/flutter/skia/",
    "//foundation/window/window_manager/utils/include",
    "//foundation/bundlemanager/bundle_framework/interfaces/inner_api/appexecfwk_base/include/",
    "//base/notification/common_event_service/interfaces/inner_api/",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_manager_path}/interfaces/innerkits:thermalsrv_client",
    "//base/powermgr/power_manager/interfaces/innerkits:powermgr_client",
    "//base/powermgr/power_manager/services:powermgrservice",
    "//base/powermgr/thermal_manager/services/zidl:thermalmgr_proxy",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = deps_ex
}

ohos_systemtest("ThermalMgrSystemTest") {
  module_out_path = "${module_output_path}"

  sources = [ "src/thermal_mgr_system_test.cpp" ]

  configs = [ "${utils_path}:utils_config" ]

  include_dirs = [
    "include",
    "${thermal_manager_path}/services/zidl/include",
    "${thermal_manager_path}/services/native/include",
    "${thermal_manager_path}/services/native/include/thermal_action",
    "${thermal_manager_path}/services/native/include/thermal_observer",
    "${thermal_manager_path}/services/native/include/thermal_policy",
    "${thermal_manager_path}/services/native/include/thermal_observer/state_machine",
    "${thermal_manager_path}/services/native/include/thermal_action/action",
    "//foundation/graphic/graphic_2d/utils/include/",
    "//base/powermgr/display_manager/interfaces/innerkits/native/include/",
    "//base/powermgr/display_manager/service/native/include/",
    "//base/powermgr/display_manager/service/zidl/include/",
    "//drivers/peripheral/display/interfaces/include/",
    "//base/powermgr/battery_manager/interfaces/innerkits/native/include/",
    "//base/powermgr/power_manager/interfaces/innerkits/native/include",
    "${ability_runtime_services_path}/appmgr/include",
    "${ability_runtime_inner_api_path}/app_manager/include/appmgr",
    "//base/startup/appspawn/include/",
    "//foundation/window/window_manager/interfaces/innerkits/wm/",
    "//third_party/flutter/skia/",
    "//foundation/window/window_manager/utils/include",
    "//foundation/bundlemanager/bundle_framework/interfaces/inner_api/appexecfwk_base/include/",
    "//base/notification/common_event_service/interfaces/inner_api/",
  ]

  deps = [
    "${ability_runtime_services_path}/appmgr:libappms",
    "${thermal_manager_path}/services:thermalservice",
    "//base/powermgr/power_manager/interfaces/innerkits:powermgr_client",
    "//base/powermgr/power_manager/services:powermgrservice",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = deps_ex
}

group("systemtest") {
  testonly = true

  deps = [
    ":ThermalMgrInterfaceTest",
    ":ThermalMgrSystemTest",
  ]
}
